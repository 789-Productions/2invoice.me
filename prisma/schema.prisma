generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  IN_PROGRESS
  NEEDS_APPROVAL
  COMPLETED
  PAID
  OVERDUE
  CANCELLED
}

enum InvoiceAction {
  CREATE
  SENT_FOR_CONFIRM
  APPROVED
  COMPLETED
  PAID
  CANCEL
  CHANGED_BY_CLIENT
  CHANGED_BY_PROVIDER
  CHANGE_APPROVED_BY_CLIENT
  CHANGE_APPROVED_BY_PROVIDER
}


model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model client {
  id        Int       @id @default(autoincrement())
  userId    String
  name      String
  email     String
  locale    String    @default("en")
  currency  String    @default("USD")
  createdAt DateTime  @default(now())
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Client_userId_fkey")
  invoice   invoice[]

  @@index([userId], map: "Client_userId_fkey")
}

model invoice {
  id          Int           @id @default(autoincrement())
  userId      String
  clientId    Int
  number      String
  token       String        @unique(map: "Invoice_token_key")
  issueDate   DateTime
  dueDate     DateTime
  currency    String        @default("USD")
  notes       String?
  createdAt   DateTime      @default(now())
  totalCents  Int
  client      client        @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "Invoice_clientId_fkey")
  user        user          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Invoice_userId_fkey")
  invoiceitem invoiceitem[]
  invoicehistory invoicehistory[]
  status      InvoiceStatus @default(DRAFT)

  @@index([clientId], map: "Invoice_clientId_idx")
  @@index([userId], map: "Invoice_userId_idx")
}

model invoicehistory {
  id         Int           @id @default(autoincrement())
  invoiceId  Int
  action     InvoiceAction
  createdAt  DateTime      @default(now())

  invoiceChanges invoicechanges[]
  invoice     invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, map: "InvoiceHistory_invoiceId_fkey")
}

model invoicechanges {
  id         Int           @id @default(autoincrement())
  invoiceHistoryId Int
  oldItemId  Int
  newItemId  Int

  oldInvoiceItem     invoiceitem @relation(name: "oldInvoiceItem", fields: [oldItemId], references: [id], onDelete: Cascade)
  newInvoiceItem     invoiceitem @relation(name: "newInvoiceItem", fields: [newItemId], references: [id], onDelete: Cascade)
  invoicehistory     invoicehistory @relation(fields: [invoiceHistoryId], references: [id], onDelete: Cascade)
}

model invoiceitem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int?
  description String
  quantity    Int
  unitCents   Int
  invoice     invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade, map: "InvoiceItem_invoiceId_fkey")

  changesAsNewItem invoicechanges[] @relation("newInvoiceItem")
  changesAsOldItem invoicechanges[] @relation("oldInvoiceItem")

  @@index([invoiceId], map: "InvoiceItem_invoiceId_fkey")
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  account       account[]
  client        client[]
  invoice       invoice[]
  session       session[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
